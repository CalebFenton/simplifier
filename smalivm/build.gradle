import proguard.gradle.ProGuardTask

buildscript {
    dependencies {
        classpath depends.proguard_gradle
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
}

dependencies {
    api group: 'org.smali', name: 'dexlib2', version: '2.4.0'
    api group: 'org.smali', name: 'smali', version: '2.4.0'
    api group: 'org.smali', name: 'baksmali', version: '2.4.0'
    implementation group: 'org.agrona', name: 'agrona', version: '1.9.0'
    implementation group: 'io.github.kostaskougios', name: 'cloning', version: '1.10.3'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation depends.commons_lang
    implementation depends.guava
    implementation depends.trove4j
    implementation depends.slf4j_api
    implementation group: 'org.ow2.asm', name: 'asm', version: '8.0.1'

    // Contains Android framework classes that should be reflected instead of virtually executed
    // E.g. android.util.Base64
    // Reflection is much faster and more robust than virtual execution
    implementation files('libs/android-local.jar')

    testImplementation depends.mockito
    testImplementation depends.perfidix
    testImplementation depends.junit_compile
    testRuntimeOnly depends.junit_engine
    testRuntimeOnly depends.junit_runner
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

task fatJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task updateReferenceFramework(type: JavaExec) {
    description 'Update Android reference framework artifacts. Use -PsmaliPath to specify path in resources/smali/, e.g. -PsmaliPath=android-25'
    classpath sourceSets.main.runtimeClasspath
    main = "org.cf.smalivm.dex.FrameworkJarBuilder"
    def smaliPath = project.hasProperty('smaliPath') ? project.getProperty('smaliPath') : 'android-25'

    args smaliPath, 'src/main/resources/framework/android-framework.jar'
}

task proguard(type: ProGuardTask, dependsOn: fatJar) {
    def outFile = "${fatJar.destinationDirectory.get()}/${fatJar.archiveBaseName.get()}-${fatJar.archiveVersion}-proguard.${fatJar.archiveExtension}"

    injars fatJar.archiveFile
    outjars outFile

    libraryjars "${System.properties['java.home']}/lib/rt.jar"

    dontobfuscate
    //dontoptimize
    optimizations '!code/allocation/variable'

    keepclassmembers 'enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'
    keepattributes '*'

    keep 'public class * { public protected *; }'

    dontwarn
    verbose
}

